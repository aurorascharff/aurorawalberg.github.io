{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/page/chart-container/chart-container.component.html","webpack:///src/app/page/chart-container/chart-container.component.ts","webpack:///src/app/page/chart-container/chart/chart.component.html","webpack:///src/app/page/chart-container/chart/chart.component.ts","webpack:///src/app/page/page.component.html","webpack:///src/app/page/page.component.ts","webpack:///src/app/shared/services/content.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","redirectTo","pathMatch","component","AppRoutingModule","AppComponent","title","AppModule","ChartContainerComponent","contentService","companies","values","ngUnsubscribe","chartInput","chartData$","pipe","subscribe","data","processData","getData","next","complete","output","forEach","element","beskrivelse","Ã¥rsresultat","Object","entries","key","graphItem","push","maxResult","filteredCompanies","ChartComponent","Highcharts","chartOptions","text","series","name","type","updateFlag","changes","currentValue","renderData","color","dataLabels","enabled","format","PageComponent","ContentService","http","datapath","chartDataSubject","asObservable","get","response","environment","production","catch","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { PageComponent } from './page/page.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'page',\n    pathMatch: 'full'\n  },\n  { path: 'page', component: PageComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","<router-outlet></router-outlet>\n","import { Component } from '@angular/core';\nimport * as Highcharts from 'highcharts';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'axeptia-case-application';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { PageComponent } from './page/page.component';\nimport { HighchartsChartModule } from 'highcharts-angular';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatCardModule} from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatInputModule } from '@angular/material/input';\nimport { ChartContainerComponent } from './page/chart-container/chart-container.component';\nimport { ChartComponent } from './page/chart-container/chart/chart.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PageComponent,\n    ChartContainerComponent,\n    ChartComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HighchartsChartModule,\n    BrowserAnimationsModule,\n    MatCardModule,\n    MatInputModule,\n    MatButtonModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","<div id= \"filter\">\n  <mat-form-field>\n    <mat-label>Maximum Ã¥rsresultat bedrift</mat-label>\n    <input matInput #input>\n  </mat-form-field>\n  <div id = \"button\">\n    <button mat-stroked-button (click) = filter(input.value)>\n      Filtrer\n    </button>\n  </div>\n</div>\n\n<app-chart [chartInput] = chartInput>\n</app-chart>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ContentService } from 'src/app/shared/services/content.service';\nimport { CompanyModel } from 'src/app/shared/models/CompanyModel';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-chart-container',\n  templateUrl: './chart-container.component.html',\n  styleUrls: ['./chart-container.component.css']\n})\nexport class ChartContainerComponent implements OnInit, OnDestroy {\n\n  private companies: CompanyModel[] = [];\n  private values: { [industrycode: string]: number; } = {};\n  private ngUnsubscribe: Subject<any> = new Subject<any>();\n  public chartInput: (string | number)[][] = [];\n\n  constructor(private contentService: ContentService) { }\n\n  /**\n   * On init, set up the chartData stream for listening in our container\n   * (data processing) component. Allow the subscribtion to last until unsub.\n   * Let companies be the chartData recieved. Then, trigger data load from json\n   * file in the service.\n   */\n  ngOnInit(): void {\n    this.contentService.chartData$.pipe(takeUntil(this.ngUnsubscribe)).subscribe(data => {\n      this.companies = data;\n      this.processData(data);\n    });\n    this.contentService.getData();\n  }\n\n  /**\n   * On destroy, unsub to the data stream to avoid data transfer\n   * of unused data.\n   */\n  ngOnDestroy(): void {\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n\n  /**\n   * Process list of companies by yearly results, add by industry,\n   * generate and update input for child component.\n   * @param data all companies to process\n   */\n  processData(data: CompanyModel[]) {\n    this.values = {};\n    const output: (string | number)[][] = [];\n\n    data.forEach(element => {\n      if (this.values[element.beskrivelse] == null) {\n        this.values[element.beskrivelse] = element.Ã¥rsresultat;\n      } else {\n        this.values[element.beskrivelse] += element.Ã¥rsresultat;\n      }\n    });\n\n    Object.entries(this.values).forEach((key => {\n      const graphItem = [key[0], key[1]];\n      output.push(graphItem);\n    }));\n    this.chartInput = output;\n  }\n\n  /**\n   * Filters chart container component for companies with yearly results\n   * above given amount\n   * @param maxResult maximum yearly result\n   */\n  filter(maxResult: number) {\n    this.chartInput = [];\n    const filteredCompanies: CompanyModel[] = [];\n\n    this.companies.forEach(element => {\n      if (element.Ã¥rsresultat <= maxResult) {\n        filteredCompanies.push(element);\n      }\n    });\n    this.processData(filteredCompanies);\n  }\n}\n","<highcharts-chart\r\n      [Highcharts]=\"Highcharts\"\r\n      [options]=\"chartOptions\"\r\n      [(update)] = \"updateFlag\"\r\n      style=\"width: 100%; height: 700px; display: block;\"\r\n></highcharts-chart>\r\n","import { Component, OnInit, ChangeDetectionStrategy, Input, SimpleChanges } from '@angular/core';\nimport * as Highcharts from 'highcharts';\n\n@Component({\n  selector: 'app-chart',\n  templateUrl: './chart.component.html',\n  styleUrls: ['./chart.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n  })\nexport class ChartComponent implements OnInit {\n\n  @Input() chartInput: number[][];\n\n  /**\n   * Highcharts component setup.\n   */\n  Highcharts: typeof Highcharts = Highcharts;\n  chartOptions: Highcharts.Options = {\n    title: {\n      text: 'Ãrsresultat for bedrifer summert pÃ¥ bransjer'\n    },\n    series: [{\n      name: 'Ãrsresultat',\n      type: 'bar',\n      data: this.chartInput\n    }]\n  };\n\n  updateFlag = false;\n\n  constructor() { }\n\n  ngOnInit(): void {\n\n  }\n\n  /**\n   * When changes on graph input variable (detected by changeDetectionStrategy.OnPush),\n   * render the new data to graph.\n   * @param changes changes on component input variables\n   */\n  // tslint:disable-next-line: use-lifecycle-interface\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.chartInput != null && changes.chartInput.currentValue != null) {\n      this.renderData();\n    }\n  }\n\n  /**\n   * Renders new data to the highchart chart.\n   */\n  renderData() {\n    this.chartOptions.\n    series = [{\n      name: 'Ãrsresultat',\n      color: 'darkblue',\n      data: this.chartInput,\n      type: 'bar',\n      dataLabels: {\n        enabled: true,\n        format: '{point.name}'\n      }\n    }];\n    this.updateFlag = true;\n  }\n\n}\n","<div id = \"card\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>\n        <h2>Ãrsresultat for bedrifer</h2>\n      </mat-card-title>\n      <mat-card-subtitle>Casearbeid gjort for Axeptia Credit Intelligence i forbindelse med jobbsÃ¸knad</mat-card-subtitle>\n    </mat-card-header>\n  </mat-card>\n</div>\n\n<app-chart-container></app-chart-container>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-page',\n  templateUrl: './page.component.html',\n  styleUrls: ['./page.component.css']\n})\nexport class PageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, Subject } from 'rxjs';\nimport { CompanyModel } from '../models/CompanyModel';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContentService {\n\n  private datapath = '../../../assets/utrekk.json';\n\n  /**\n   * Datasource setup. Creates subject list for data and sets up data\n   * stream from this as observable.\n   */\n  private chartDataSubject: Subject<CompanyModel[]> = new Subject<CompanyModel[]>();\n  public chartData$: Observable<CompanyModel[]> = this.chartDataSubject.asObservable();\n\n  constructor(private http: HttpClient) { }\n\n  /**\n   * Gets data from the JSON file and fills the chartData stream.\n   */\n  getData() {\n    this.http.get<CompanyModel[]>(this.datapath).subscribe((response) => {\n      this.chartDataSubject.next(response);\n    });\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}